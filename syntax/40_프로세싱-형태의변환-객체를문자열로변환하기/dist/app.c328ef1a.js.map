{"version":3,"sources":["app.js"],"names":["cartItems","id","item","price","discount","cartItemsArray","row","Object","entries","value","push","join","console","log","extractValueInObject","obj","map","String","cartItemsString"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AAEA,IAAMA,SAAS,GAAG,CAChB;AAAEC,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,IAAI,EAAE,KAAf;AAAsBC,EAAAA,KAAK,EAAE,KAA7B;AAAoCC,EAAAA,QAAQ,EAAE;AAA9C,CADgB,EAEhB;AAAEH,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,IAAI,EAAE,MAAf;AAAuBC,EAAAA,KAAK,EAAE,IAA9B;AAAoCC,EAAAA,QAAQ,EAAE;AAA9C,CAFgB,EAGhB;AAAEH,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,IAAI,EAAE,KAAf;AAAsBC,EAAAA,KAAK,EAAE,MAA7B;AAAqCC,EAAAA,QAAQ,EAAE;AAA/C,CAHgB,EAIhB;AAAEH,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,IAAI,EAAE,QAAf;AAAyBC,EAAAA,KAAK,EAAE,MAAhC;AAAwCC,EAAAA,QAAQ,EAAE;AAAlD,CAJgB,CAAlB,EAOA;;AACA,IAAMC,cAAc,GAAG,EAAvB;;AAEA,8BAAmBL,SAAnB,gCAA8B;AAAzB,MAAME,IAAI,iBAAV;AACH,MAAMI,GAAG,GAAG,EAAZ,CAD4B,CAG5B;AACA;AACA;;AACA,sCAAwBC,MAAM,CAACC,OAAP,CAAeN,IAAf,CAAxB,uCAA8C;AAAzC;AAAA,QAASO,KAAT;;AACH;AACAH,IAAAA,GAAG,CAACI,IAAJ,CAASD,KAAT;AACD;;AACDJ,EAAAA,cAAc,CAACK,IAAf,CAAoBJ,GAAG,CAACK,IAAJ,EAApB;AACD;;AAEDC,OAAO,CAACC,GAAR,CAAYR,cAAc,CAACM,IAAf,CAAoB,KAApB,CAAZ,GAEA;;AACA,IAAMG,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,GAAD;AAAA,SAC3BR,MAAM,CAACC,OAAP,CAAeO,GAAf,EAAoB;AAApB,GACGC,GADH,CACO;AAAA;AAAA,QAAIP,KAAJ;;AAAA,WAAeQ,MAAM,CAACR,KAAD,CAArB;AAAA,GADP,CAD2B;AAAA,CAA7B;;AAIA,IAAMS,eAAe,GAAGlB,SAAS,CAAC;AAAD,CAC9BgB,GADqB,CACjBF,oBADiB,EAErBH,IAFqB,CAEhB,KAFgB,CAAxB;AAIAC,OAAO,CAACC,GAAR,CAAYK,eAAZ","file":"app.c328ef1a.js","sourceRoot":"..","sourcesContent":["/*\n문자열 포맷: id, item, price, discount\n*/\n\nconst cartItems = [\n  { id: 1, item: \"핸드밀\", price: 40000, discount: 0 },\n  { id: 2, item: \"A4용지\", price: 4000, discount: 0 },\n  { id: 3, item: \"수영복\", price: 120000, discount: 0 },\n  { id: 4, item: \"색연필72색\", price: 150000, discount: 0 },\n];\n\n// 전통적인 반복문을 이용한 코드 패턴\nconst cartItemsArray = [];\n\nfor (const item of cartItems) {\n  const row = [];\n\n  // 객체 안의 key, value를 꺼내올 수 있는 방법\n  // Object가 제공하는 entries라는 메소드가 있다. 이 메소드 안에 객체를 집어 넣으면 key, value를 각각 꺼내올 수 있다.\n  // value만 가지고 오고 싶을 경우 구조분해 할당을 통해 [, value] key값을 생략할 수 있다.\n  for (const [, value] of Object.entries(item)) {\n    // console.log(key, value);\n    row.push(value);\n  }\n  cartItemsArray.push(row.join());\n}\n\nconsole.log(cartItemsArray.join(\"===\"));\n\n// 배열연산을 이용한 방법\nconst extractValueInObject = (obj) =>\n  Object.entries(obj) //\n    .map(([, value]) => String(value));\n\nconst cartItemsString = cartItems //\n  .map(extractValueInObject)\n  .join(\"===\");\n\nconsole.log(cartItemsString);\n"]}