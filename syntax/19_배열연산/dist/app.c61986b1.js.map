{"version":3,"sources":["app.ts"],"names":[],"mappings":"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","file":"app.c61986b1.js","sourceRoot":"..","sourcesContent":["type Book = {\n  title: string;\n  copyright?: string;\n  author?: string;\n};\n\nconst books: string[] = [\"헨리 6세\", \"리처드 3세\", \"실수 연발\", \"말괄량이 길들이기\", \"헨리 8세\"];\n\n// forEach 순회 배열의 첫번째 부터 마지막까지 하나씩 순회하는 것.\n// 배열이 제공하는 함수를 사용\n// forEach가 가지고 있는 인자는 (value, index, array) 순서대로 항상 똑같다. 필요한 인자만 사용 가능\nbooks.forEach((book: string, idx: number, books: string[]) => {\n  console.log(book, idx);\n});\n\n// map (데이터를 변환할 경우 자주 자주 사용)\n// 모든 배열을 순회하면서 리턴 값을 새로운 배열로 만들어 반환한다.\nconst bookObjects: Book[] = books.map((book: string) => {\n  return {\n    title: book,\n    author: undefined,\n  };\n});\n\n// console.log(bookObjects);\n\n// 메소드 체이닝\nconst ShakespeareOneBooks: Book[] = books\n  // 객체를 값으로서 return 한 다음 그 값을 다시 map 함수를 활용\n  .map((book: string) => ({\n    title: book,\n  }))\n  .map((book: Book) => ({\n    ...book,\n    author: \"William Shakespeare\",\n  }));\n\n// console.log(ShakespeareOneBooks);\n\n// map함수를 두개 연결해서 사용하는 이유\nconst bookTitleToBookObject = (book: string) => ({ title: book });\n// 커링 기법 첫 번째 함수의 return 값이 함수 그 값의 return 값이 객체\nconst makeAuthor = (name: string) => (book: Book) => ({\n  ...book,\n  author: name,\n});\n\nconst shakespeareTwoBooks: Book[] = books //\n  .map(bookTitleToBookObject)\n  .map(makeAuthor(\"William Shakespeare\"));\n\n// console.log(shakespeareTwoBooks);\n\n// filter\n// 함수가 return 하는 값중 참인 값만 배열로 모아서 return 해준다.\n// includes 문자열 함수 ('문자')가 포함되어 있는 값이 있다면 true 없다면 false\nconst henry: Book[] = shakespeareTwoBooks.filter((book: Book) => book.title.includes(\"헨리\"));\n\n// console.log(henry);\n\n// reduce (누적함수)\n// 항상 인자가 두개가 존재한다. a => prev, b => curr, 초기값\nconst someNumbers: number[] = [10, 5, 3, 14, 56];\n\nconst sumNumber = someNumbers.reduce((a: number, b: number) => a + b, 0);\nconsole.log(sumNumber);\n\n// reduce 함수의 응용\ntype SomeObject = {\n  [key: string]: string | number;\n};\n\nconst someObjects: SomeObject[] = [{ border: \"none\" }, { fontSize: 24 }, { className: \"box sm-box\" }];\n\nconst someObject: SomeObject = someObjects.reduce((prev: SomeObject, curr: SomeObject) => ({ ...prev, ...curr }), {});\nconsole.log(someObject);\n\n// 유사배열\nfunction sumNumbers(): number {\n  // 유사배열인 arguments를 배열로 만드려면 Array.from(arguments)를 해줘야한다.\n  return Array.from(arguments).reduce((prev: number, curr: number) => prev + curr, 0);\n}\n\nconsole.log(sumNumbers(10, 20, 30, 40, 50));\n\n// 전개파라미터인 ...args를 사용하면 바로 배열로써의 역할을 할 수 있다.\n// 위의 문법 보다는 무조건 아래의 문법을 사용하는게 좋다.\nfunction sumNumbersForTypeScript(...args: number[]): number {\n  return args.reduce((prev: number, curr: number) => prev + curr, 0);\n}\n\nconsole.log(sumNumbersForTypeScript(10, 20, 30, 40, 50, 60));\n"]}