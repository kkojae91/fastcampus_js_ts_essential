{"id":"app.js","dependencies":[],"generated":{"js":"// closure(클로저)는 함수 안쪽에서 함수가 만들어질 때 increment함수 안의 함수에 있는 코드 중에 바깥 함수에 있는 변수에 접근을 하게 되면,\n// 이 접근한 변수를 closure라는 특별한 공간에 저장을 해둡니다.\n// 그리고 나서 이 함수가 반환을 하면, saveNumber가 있던 increment함수의 지역 공간은 사라져서 saveNumber는 사라지지만,\n// 안쪽에 함수가 만들어지면서 옮겨졌던 클로저라는 공간에는 saveNumber가 유지되고 있는 것\n// 보호 되어야 하는 값이 필요하다면 closure라는 공간에 변수를 담아두고 사용할 경우 closure를 사용합니다.\n// TS의 경우 private을 사용하여 값을 보호할 수 있지만 JS의 경우 그러한 스팩이 없기 때문에 closure를 사용해서 값을 보호한다.\nfunction increment() {\n  var saveNumber = 1;\n  return function () {\n    return saveNumber++;\n  };\n}\n\nvar inc = increment(); // inc를 호출할 때 saveNumber를 로컬 공간에서 찾는게 아니라 클로저라는 특별한 공간에서 saveNumber를 찾아서 저장된 값을 유지하며 반환한다.\n\nconsole.log(inc());\nconsole.log(inc());\nconsole.log(inc());"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"app.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"app.js","original":{"line":2,"column":0}},{"generated":{"line":3,"column":0},"source":"app.js","original":{"line":3,"column":0}},{"generated":{"line":4,"column":0},"source":"app.js","original":{"line":4,"column":0}},{"generated":{"line":5,"column":0},"source":"app.js","original":{"line":5,"column":0}},{"generated":{"line":6,"column":0},"source":"app.js","original":{"line":6,"column":0}},{"generated":{"line":7,"column":0},"source":"app.js","original":{"line":7,"column":0}},{"name":"increment","generated":{"line":7,"column":9},"source":"app.js","original":{"line":7,"column":9}},{"generated":{"line":7,"column":18},"source":"app.js","original":{"line":7,"column":0}},{"generated":{"line":7,"column":21},"source":"app.js","original":{"line":7,"column":21}},{"generated":{"line":8,"column":0},"source":"app.js","original":{"line":8,"column":2}},{"name":"saveNumber","generated":{"line":8,"column":6},"source":"app.js","original":{"line":8,"column":6}},{"generated":{"line":8,"column":16},"source":"app.js","original":{"line":8,"column":16}},{"generated":{"line":8,"column":19},"source":"app.js","original":{"line":8,"column":19}},{"generated":{"line":8,"column":20},"source":"app.js","original":{"line":8,"column":2}},{"generated":{"line":9,"column":0},"source":"app.js","original":{"line":10,"column":2}},{"generated":{"line":9,"column":9},"source":"app.js","original":{"line":10,"column":9}},{"generated":{"line":9,"column":21},"source":"app.js","original":{"line":10,"column":21}},{"generated":{"line":10,"column":0},"source":"app.js","original":{"line":11,"column":4}},{"name":"saveNumber","generated":{"line":10,"column":11},"source":"app.js","original":{"line":11,"column":11}},{"generated":{"line":10,"column":21},"source":"app.js","original":{"line":11,"column":21}},{"generated":{"line":10,"column":23},"source":"app.js","original":{"line":11,"column":4}},{"generated":{"line":11,"column":0},"source":"app.js","original":{"line":12,"column":3}},{"generated":{"line":11,"column":3},"source":"app.js","original":{"line":10,"column":2}},{"generated":{"line":12,"column":0},"source":"app.js","original":{"line":13,"column":1}},{"generated":{"line":14,"column":0},"source":"app.js","original":{"line":15,"column":0}},{"name":"inc","generated":{"line":14,"column":4},"source":"app.js","original":{"line":15,"column":6}},{"generated":{"line":14,"column":7},"source":"app.js","original":{"line":15,"column":9}},{"name":"increment","generated":{"line":14,"column":10},"source":"app.js","original":{"line":15,"column":12}},{"generated":{"line":14,"column":19},"source":"app.js","original":{"line":15,"column":21}},{"generated":{"line":14,"column":21},"source":"app.js","original":{"line":15,"column":0}},{"generated":{"line":14,"column":23},"source":"app.js","original":{"line":16,"column":0}},{"name":"console","generated":{"line":16,"column":0},"source":"app.js","original":{"line":17,"column":0}},{"generated":{"line":16,"column":7},"source":"app.js","original":{"line":17,"column":7}},{"name":"log","generated":{"line":16,"column":8},"source":"app.js","original":{"line":17,"column":8}},{"generated":{"line":16,"column":11},"source":"app.js","original":{"line":17,"column":0}},{"name":"inc","generated":{"line":16,"column":12},"source":"app.js","original":{"line":17,"column":12}},{"generated":{"line":16,"column":15},"source":"app.js","original":{"line":17,"column":15}},{"generated":{"line":16,"column":17},"source":"app.js","original":{"line":17,"column":0}},{"name":"console","generated":{"line":17,"column":0},"source":"app.js","original":{"line":18,"column":0}},{"generated":{"line":17,"column":7},"source":"app.js","original":{"line":18,"column":7}},{"name":"log","generated":{"line":17,"column":8},"source":"app.js","original":{"line":18,"column":8}},{"generated":{"line":17,"column":11},"source":"app.js","original":{"line":18,"column":0}},{"name":"inc","generated":{"line":17,"column":12},"source":"app.js","original":{"line":18,"column":12}},{"generated":{"line":17,"column":15},"source":"app.js","original":{"line":18,"column":15}},{"generated":{"line":17,"column":17},"source":"app.js","original":{"line":18,"column":0}},{"name":"console","generated":{"line":18,"column":0},"source":"app.js","original":{"line":19,"column":0}},{"generated":{"line":18,"column":7},"source":"app.js","original":{"line":19,"column":7}},{"name":"log","generated":{"line":18,"column":8},"source":"app.js","original":{"line":19,"column":8}},{"generated":{"line":18,"column":11},"source":"app.js","original":{"line":19,"column":0}},{"name":"inc","generated":{"line":18,"column":12},"source":"app.js","original":{"line":19,"column":12}},{"generated":{"line":18,"column":15},"source":"app.js","original":{"line":19,"column":15}},{"generated":{"line":18,"column":17},"source":"app.js","original":{"line":19,"column":0}}],"sources":{"app.js":"// closure(클로저)는 함수 안쪽에서 함수가 만들어질 때 increment함수 안의 함수에 있는 코드 중에 바깥 함수에 있는 변수에 접근을 하게 되면,\n// 이 접근한 변수를 closure라는 특별한 공간에 저장을 해둡니다.\n// 그리고 나서 이 함수가 반환을 하면, saveNumber가 있던 increment함수의 지역 공간은 사라져서 saveNumber는 사라지지만,\n// 안쪽에 함수가 만들어지면서 옮겨졌던 클로저라는 공간에는 saveNumber가 유지되고 있는 것\n// 보호 되어야 하는 값이 필요하다면 closure라는 공간에 변수를 담아두고 사용할 경우 closure를 사용합니다.\n// TS의 경우 private을 사용하여 값을 보호할 수 있지만 JS의 경우 그러한 스팩이 없기 때문에 closure를 사용해서 값을 보호한다.\nfunction increment() {\n  let saveNumber = 1;\n\n  return function () {\n    return saveNumber++;\n  };\n}\n\nconst inc = increment();\n// inc를 호출할 때 saveNumber를 로컬 공간에서 찾는게 아니라 클로저라는 특별한 공간에서 saveNumber를 찾아서 저장된 값을 유지하며 반환한다.\nconsole.log(inc());\nconsole.log(inc());\nconsole.log(inc());\n"},"lineCount":null}},"error":null,"hash":"a5cfbaeeae1a880b8fc1afa3383e427e","cacheData":{"env":{}}}